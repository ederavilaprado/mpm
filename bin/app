#!/usr/bin/env node

var pm2 = require('pm2');
var argv = require('yargs').argv;
var _ = require('lodash');
var fs = require('fs');
var path = require('path');
require('colors');


// Carrega arquivo com informações do projeto
var infoJson = JSON.parse(fs.readFileSync(path.resolve(__dirname, '.info.json')));
// Carrega package.json do aplicativo a ser executado.
var packageJson = JSON.parse(fs.readFileSync(path.resolve(__dirname, 'node_modules', infoJson.appName, 'package.json')));

var yargs = require('yargs')
  .usage(('Controla o aplicativo "' + packageJson.name + '-v' + packageJson.version + '" instalado como dependencia nesta estrutura.').underline.green +
    '\nUsage: $0 <commando>?' +
    '\n\nComandos:' +
    '\n  start'.cyan + ': Inicia a aplicação' + 
    '\n  stop'.cyan + ': Para a aplicação' +
    '\n  reload'.cyan + ': Reinicia a aplicação com graceful reload' +
    '\n  kill'.cyan + ': Mata o processo do pm2 para este processo (pm2 daemon local)' +
    '\n  exec'.cyan + ': Executa o projeto sem o pm2' +
    '\n'
    )

  .example('$0 -- -h', 'Passa parâmetros -h direto para o projeto principal')
  .example('$0 start -- --config ./config', 'Passa parâmetros --config direto para o projeto principal')

  .alias('instances', 'i')
  .describe('instances', 'Quantidade de nós para o cluster da aplicação. Se não informado, executa em modo "fork"')

  .help('h', 'Ajuda');

var args = yargs.argv;

// Wrapper para um possível log...
function log(msg) {
  console.log(msg);
}

// Remove o primeiro parâmetro, no caso o comando do args.
var command = args['_'].shift();

if (/^(start|stop|reload|list|kill|exec)$/.test(command) === false) {
  yargs.showHelp();
  log('\nEntre com um dos comando válidos para continuar.\n'.red);
  process.exit(1);
}

// Busca o script de inicialização dentro do packagejson
if (!packageJson.scripts.start) {
  log('Script de inicialização não está presente dentro do projeto a ser executado (npm start). Impossível iniciar a aplicação'.red);
  process.exit(1);
}
var rgxStart = /(node )?(.*)/.exec(packageJson.scripts.start);
var start = null;
if (rgxStart) {
  var a = rgxStart[2].split(' ');
  start = {
    file: path.resolve(__dirname, 'node_modules', packageJson.name, a.shift()),
    args: a
  };
}

// obtem comando a ser executado no caso do pm2
if (/^(start|stop|reload|list|kill)$/.test(command)) { // Executa comandos do pm2
  log('Commando informando... conectando com pm2 daemon'.green);

  pm2.connect(function(err) {
    if (err) {
      log('Erro ao se conectar com o pm2 daemon'.red + 'Erro: ' + err.stack);
      process.exit(1);
    }

    var currentDir = __dirname.split('/').slice(-1)[0];
    var processName = currentDir + '::' + infoJson.appName + '::' + infoJson.creationHash;

    if (command === 'start') {
      log('Iniciando processos');

      // Valida se o processo já não está em execução
      pm2.describe(processName, function (err, list){
        if (err) {
          log('Erro ao obter informações sobre o processo.'.red + ' Erro: ' + err.stack);
          process.exit(1);
        }

        if (list.length > 0) {
          log('O processo já está sendo executado.'.yellow);
          process.exit(1);
        }

        var options = {
          name: processName,
          error: path.resolve(__dirname, 'logs', 'pm2_err.log'),
          output: path.resolve(__dirname, 'logs', 'pm2_out.log'),
          scriptArgs: start.args.concat(args['_'])
        };
        if (args.instances) // Fork mode
          options.instances = args.instances;

        pm2.start(start.file, options, function (err, proc) {
          if (err) {
            log('Erro ao disponibilizar a aplicação'.red + ' Erro: ' + err.stack);
            process.exit(1);
          }

          log('Aplicação on-line'.green);

          pm2.disconnect(function() { process.exit(0); });
        });
      });

    } else if (command === 'list') {
      log('Listando processos ativos');

      pm2.list(function (err, list){
        if (err) {
          log('Erro ao obter informações da aplicação on-line.'.red + ' Erro: ' + err.stack);
          process.exit(1);
        }
        _.each(list, function (item) {
          log('->'.green + ' Pid: ' + item.pid + '; Name: ' + item.name + '; Mem: ' + (item.monit.memory / 1000000).toFixed(2) + ' mb; Cpu: ' + item.monit.cpu);
        });

        pm2.disconnect(function() { process.exit(0); });
      });

    } else if (command === 'stop') {
      log('Parando o processo');

      pm2.stop(processName, function (err, proc) {
        if (err) {
          log('Erro ao parar o processo.'.red + ' Erro: ' + err.stack);
          process.exit(1);
        }

        log('Processo parado com sucesso.'.green);

        pm2.disconnect(function() { process.exit(0); });
      });

    } else if (command ===  'reload') {
      log('Reiniciando processo utilizando "graceful reload"');

      pm2.gracefulReload(processName, function (err, proc){
        if (err) {
          log('Erro ao realizar o reload do processo.'.red + ' Erro: ' + err.stack);
          process.exit(1);
        }

        log('Processo reiniciado com sucesso.'.green);

        pm2.disconnect(function() { process.exit(0); });

      });

    } else if (command === 'kill') {
      log('Matando daemon do pm2 local.');

      pm2.killDaemon(function (err, ret){
        if (err) {
          log('Erro ao matar o daemon do pm2 local.'.red + ' Erro: ' + err.stack);
          process.exit(1);
        }

        log('Pm2 daemon local encerrado.'.green);

        pm2.disconnect(function() { process.exit(0); });

      });

    }

  });

} else if (command == 'exec') {
  var spawn = require('child_process').spawn,
      child = spawn('node', [start.file].concat(start.args).concat(args['_']));

  child.stdout.on('data', function (data) {
    console.log(data.toString());
  });
  child.stderr.on('data', function (data) {
    console.log(data.toString());
  });
  child.on('close', function (code) {
    process.exit(code);
  });
}
